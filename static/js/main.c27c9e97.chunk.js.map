{"version":3,"sources":["component/Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","react_default","a","createElement","className","this","props","isBusinessTheme","disabled","isConsumerTheme","Component","App","component_Button","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c27c9e97.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../assets/styles/_button.scss';\n\nclass Button extends Component {\n  render() {\n    return (\n        //  Uncomment the code to display different size.\n        //  Need to hover and click the button to show different styles for each state.\n        <div className=\"button-section\">\n            {this.props.isBusinessTheme && \n                <div className=\"section\">\n                    <h1>This is the Business Theme Button.</h1>\n                    <div className=\"button-row\">\n                        <p>Primary Button</p>\n                        <div className=\"buttons-group\">\n                            <button className=\"button-business-primary lg\"><span className=\"button-text\">Primary</span></button>\n                            <button className=\"button-business-primary md\"><span className=\"button-text\">Primary</span></button>\n                            <button className=\"button-business-primary sm\"><span className=\"button-text\">Primary</span></button>\n                        </div>\n                    </div>\n                    <div className=\"button-row\">\n                        <p>Primary Button Disabled</p>\n                        <div className=\"buttons-group\">\n                            <button disabled={true} className=\"button-business-primary lg\"><span className=\"button-text\">Primary</span></button>\n                            <button disabled={true} className=\"button-business-primary md\"><span className=\"button-text\">Primary</span></button>\n                            <button disabled={true} className=\"button-business-primary sm\"><span className=\"button-text\">Primary</span></button>\n                        </div>\n                    </div>\n                    <div className=\"button-row\">\n                        <p>Secondary Button</p>\n                        <div className=\"buttons-group\">\n                            <button className=\"button-business-sec lg\"><span className=\"button-text\">Secondary</span></button>\n                            <button className=\"button-business-sec md\"><span className=\"button-text\">Secondary</span></button>\n                            <button className=\"button-business-sec sm\"><span className=\"button-text\">Secondary</span></button>\n                        </div>\n                    </div>\n                    <div className=\"button-row\">\n                        <p>Secondary Button Disabled</p>\n                        <div className=\"buttons-group\">\n                            <button disabled={true} className=\"button-business-sec lg\"><span className=\"button-text\">Secondary</span></button>\n                            <button disabled={true} className=\"button-business-sec md\"><span className=\"button-text\">Secondary</span></button>\n                            <button disabled={true} className=\"button-business-sec sm\"><span className=\"button-text\">Secondary</span></button>\n                        </div>\n                    </div>\n                </div>\n            }\n\n            {this.props.isConsumerTheme && \n                <div className=\"section\">\n                    <h1>This is the Consumer Theme Button.</h1>\n                    <div className=\"button-row\">\n                        <p>Primary Button</p>\n                        <button className=\"button-consumer-primary\"><span className=\"button-text\">Primary</span></button>\n                    </div>\n                    \n                    <div className=\"button-row\">\n                        <p>Primary Button Disabled</p>\n                        <button disabled={true} className=\"button-consumer-primary\"><span className=\"button-text\">Primary</span></button>\n                    </div>\n                \n                    <div className=\"button-row\">\n                        <p>Secondary Button</p>\n                        <button className=\"button-consumer-sec\"><span className=\"button-text\">Secondary</span></button>\n                    </div>\n                    \n                    <div className=\"button-row\">\n                        <p>Secondary Button <br/>Disabled</p>\n                        <button disabled={true} className=\"button-consumer-sec\"><span className=\"button-text\">Secondary</span></button>\n                    </div>\n                </div>\n            }\n        </div>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Button from './component/Button';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"button-sections\">\n          <Button isBusinessTheme={true} disabled={true}></Button>\n          <Button isConsumerTheme={true}></Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}